"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[863],{3321:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>j,frontMatter:()=>h,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"TechnicalDocs/quickstart/build","title":"Setting Up the Build Environment","description":"It is recommended to use VSCode for compiling this project under Windows. Below are detailed steps for configuring the development environment and compiling the project files.","source":"@site/docs/TechnicalDocs/quickstart/build.mdx","sourceDirName":"TechnicalDocs/quickstart","slug":"/TechnicalDocs/quickstart/build","permalink":"/docs/TechnicalDocs/quickstart/build","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"TechnicalDocsSidebar","previous":{"title":"Firmware Quick Start Guide","permalink":"/docs/TechnicalDocs/quickstart/preparation"},"next":{"title":"Flashing Firmware Using the Forced Download Tool","permalink":"/docs/TechnicalDocs/quickstart/flash"}}');var t=s(4848),o=s(8453);const l=s.p+"assets/images/firmware_open_vscode-38b7d328150189258dc7e15fd5abdcc8.jpg",r=s.p+"assets/images/firmware_vscode_task-1b2b9c5b089aa80e0dc82588b5f5ef9b.jpg",c=s.p+"assets/images/firmware_vscode_c_cpp_ext-c802c9351a18d5340156c8c556f88b45.jpg",d=s.p+"assets/images/firmware_vscode_build-d4a37da0bd73c88cad3e7f51cffe1448.jpg",a=s.p+"assets/images/build_ok-a6b2cd2985f1ab6fd1c05f7e8b206884.png",h={},p="Setting Up the Build Environment",m={},u=[];function f(e){const n={a:"a",br:"br",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"setting-up-the-build-environment",children:"Setting Up the Build Environment"})}),"\n",(0,t.jsx)(n.p,{children:"It is recommended to use VSCode for compiling this project under Windows. Below are detailed steps for configuring the development environment and compiling the project files."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Configure the Windows Development Environment"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This SDK project is designed specifically for Windows systems, with Code::Blocks as the default development environment. The configuration process mainly consists of the following three steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Download and install the Windows version of Code::Blocks"}),": You can get it from ",(0,t.jsx)(n.a,{href:"https://pkgman.jieliapp.com/s/codeblocks",children:"Code::Blocks Windows Version"})," and install it."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Open and close Code::Blocks for the first time"}),": After installation, open Code::Blocks for the first time and then close it immediately. This operation is to generate the necessary configuration files for subsequent development work."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Download and install the latest version of the JieLi Windows toolchain"}),": Get the latest version from ",(0,t.jsx)(n.a,{href:"https://pkgman.jieliapp.com/s/win-toolchain",children:"Latest JieLi Windows Toolchain"})," and install it."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"After completing the above steps, you can open the Code::Blocks project and start compiling and developing. (It is recommended to use VSCode for compiling and development.)"}),"\n",(0,t.jsxs)(n.p,{children:["If you need more toolchains and post-processing tools, please refer to: ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://doc.zh-jieli.com/Tools/zh-cn/other_info/index.html",children:"Latest Tool Versions"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For more detailed instructions on development tools, please visit:",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://doc.zh-jieli.com/Tools/zh-cn/dev_tools/dev_env/index.html",children:"https://doc.zh-jieli.com/Tools/zh-cn/dev_tools/dev_env/index.html"})]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Compile the SDK Using VSCode"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Compiling the SDK with VSCode is done by invoking the make command. The specific steps are as follows:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Open the project in the SDK root directory using VSCode, as shown below:"}),"\n"]}),"\n",(0,t.jsx)("img",{src:l,alt:"firmware",width:"400",style:{display:"block",margin:"0 auto"}}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Install the necessary extensions: ",(0,t.jsx)(n.strong,{children:"Task Explorer"})," and ",(0,t.jsx)(n.strong,{children:"C/C++"}),". See the images below:"]}),"\n"]}),"\n",(0,t.jsx)("img",{src:r,alt:"firmware",width:"400",style:{display:"block",margin:"0 auto"}}),"\n",(0,t.jsx)("img",{src:c,alt:"firmware",width:"400",style:{display:"block",margin:"0 auto"}}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Select the corresponding task to compile: Click ",(0,t.jsx)(n.strong,{children:"TASK EXPLORER > SDK > vscode"})," to view the available task list, which includes:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"all"}),": to build the entire project"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"clean"}),": to clean the build output files\r\nSee the image below:"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("img",{src:d,alt:"firmware",width:"400",style:{display:"block",margin:"0 auto"}}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run Build Tasks in the Project Root Directory"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Get the code:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/Buddie-AI/Buddie.git\r\ncd Buddie/Firmware-JL701N\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.strong,{children:"TASK EXPLORER > SDK > vscode > all"})," to start compiling."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["After a successful build, you will see ",(0,t.jsx)(n.code,{children:"\u751f\u6210UFW\u6587\u4ef6 jl_isd.ufw"}),' ("UFW file jl_isd.ufw generated") as shown below:']}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("img",{src:a,alt:"firmware",width:"400",style:{display:"block",margin:"0 auto"}})]})}function j(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var i=s(6540);const t={},o=i.createContext(t);function l(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);